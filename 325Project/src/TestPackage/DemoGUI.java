/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TestPackage;

import com.marsG.simplerandomorglib.RandomIntegerClient;
import java.io.IOException;
import java.util.*;

/**
 *
 * @author trevor
 */
public class DemoGUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public DemoGUI() {
        initComponents();

    }
    //Player Stat holders
    Integer playerHP;
    Integer playerMax;
    Integer playerAtt;
    Integer playerDef;
    Integer playerRange;
    String playerClass;
    Boolean playerStatus = false;

    //Enemy stat holders
    Integer enemyHP;
    Integer enemyMax;
    Integer enemyAtt;
    Integer enemyDef;
    String enemyClass;
    Boolean enemyStatus;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton16 = new javax.swing.JRadioButton();
        newChar = new javax.swing.JFrame();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSetName = new javax.swing.JTextField();
        txtSetPass = new javax.swing.JTextField();
        cboClassSelect = new javax.swing.JComboBox<>();
        btnBegin = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnDefend = new javax.swing.JButton();
        btnMove = new javax.swing.JButton();
        btnAttack = new javax.swing.JButton();
        btnSpecial = new javax.swing.JButton();
        pos1 = new javax.swing.JRadioButton();
        pos2 = new javax.swing.JRadioButton();
        pos3 = new javax.swing.JRadioButton();
        pos4 = new javax.swing.JRadioButton();
        pos5 = new javax.swing.JRadioButton();
        pos6 = new javax.swing.JRadioButton();
        pos7 = new javax.swing.JRadioButton();
        pos8 = new javax.swing.JRadioButton();
        pos9 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSelf = new javax.swing.JTextArea();
        pos10 = new javax.swing.JRadioButton();
        pos11 = new javax.swing.JRadioButton();
        pos12 = new javax.swing.JRadioButton();
        pos13 = new javax.swing.JRadioButton();
        pos14 = new javax.swing.JRadioButton();
        pos15 = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtEnemy = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtAction = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newGame = new javax.swing.JMenuItem();
        login = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        summon1 = new javax.swing.JMenuItem();
        summon2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jRadioButton16.setText("jRadioButton16");

        newChar.setMinimumSize(new java.awt.Dimension(400, 300));

        jLabel4.setText("Name:");

        jLabel5.setText("Class:");

        jLabel6.setText("Password:");

        cboClassSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paladin (Tank)", "Priest (Healer)", "Hunter (Ranged)", "Warrior (Melee)" }));
        cboClassSelect.setSelectedIndex(-1);

        btnBegin.setText("Begin");
        btnBegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBeginActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newCharLayout = new javax.swing.GroupLayout(newChar.getContentPane());
        newChar.getContentPane().setLayout(newCharLayout);
        newCharLayout.setHorizontalGroup(
            newCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCharLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(newCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSetName)
                    .addComponent(txtSetPass)
                    .addComponent(cboClassSelect, 0, 200, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(newCharLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(btnBegin, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );
        newCharLayout.setVerticalGroup(
            newCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCharLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtSetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(newCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSetPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(newCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cboClassSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(newCharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBegin)
                    .addComponent(btnCancel))
                .addGap(71, 71, 71))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnDefend.setText("Defend");
        btnDefend.setToolTipText("");
        btnDefend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefendActionPerformed(evt);
            }
        });

        btnMove.setText("Move");
        btnMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveActionPerformed(evt);
            }
        });

        btnAttack.setText("Attack");
        btnAttack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttackActionPerformed(evt);
            }
        });

        btnSpecial.setText("Special");
        btnSpecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpecialActionPerformed(evt);
            }
        });

        jLabel1.setText("Your Stats:");

        jLabel2.setText("Your Enemy:");
        jLabel2.setToolTipText("");

        jScrollPane2.setHorizontalScrollBar(null);

        txtSelf.setEditable(false);
        txtSelf.setColumns(20);
        txtSelf.setRows(5);
        jScrollPane2.setViewportView(txtSelf);

        jScrollPane3.setHorizontalScrollBar(null);

        txtEnemy.setEditable(false);
        txtEnemy.setColumns(20);
        txtEnemy.setRows(5);
        jScrollPane3.setViewportView(txtEnemy);

        jScrollPane4.setHorizontalScrollBar(null);

        txtAction.setEditable(false);
        txtAction.setColumns(20);
        txtAction.setRows(5);
        jScrollPane4.setViewportView(txtAction);

        jLabel3.setText("Previous Actions");

        jMenu1.setText("Options");

        newGame.setText("New Game");
        newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameActionPerformed(evt);
            }
        });
        jMenu1.add(newGame);

        login.setText("Login");
        jMenu1.add(login);

        save.setText("Save");
        jMenu1.add(save);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Summon");

        summon1.setText("Murloc");
        summon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summon1ActionPerformed(evt);
            }
        });
        jMenu3.add(summon1);

        summon2.setText("Goblin");
        summon2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summon2ActionPerformed(evt);
            }
        });
        jMenu3.add(summon2);

        jMenuItem1.setText("Troll");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Boss");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 264, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(412, 412, 412))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pos1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pos15))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(71, 71, 71)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnSpecial, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDefend, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(btnMove, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(122, 122, 122)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(219, 219, 219))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pos2)
                    .addComponent(pos1)
                    .addComponent(pos3)
                    .addComponent(pos4)
                    .addComponent(pos5)
                    .addComponent(pos6)
                    .addComponent(pos7)
                    .addComponent(pos8)
                    .addComponent(pos9)
                    .addComponent(pos10)
                    .addComponent(pos11)
                    .addComponent(pos12)
                    .addComponent(pos13)
                    .addComponent(pos14)
                    .addComponent(pos15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAttack, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDefend)
                            .addComponent(btnMove))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSpecial))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //trigger player defense
    private void btnDefendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefendActionPerformed
        // TODO add your handling code here:
        //will either reduce or negate damage dependant on class
        playerStatus = true;
        enemyReaction();
        playerStatus = false;
    }//GEN-LAST:event_btnDefendActionPerformed

    //trigger player movement
    private void btnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveActionPerformed
        // TODO add your handling code here:
        //Player movement
        playerMovement();
        enemyReaction();

    }//GEN-LAST:event_btnMoveActionPerformed

    //trigger player attack
    private void btnAttackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttackActionPerformed
        // TODO add your handling code here:
        if (playerRange == 1) {
            playerMeleeAttack();
        }
        if (playerRange == 2) {
            playerRangeAttack();
        }
        enemyReaction();
    }//GEN-LAST:event_btnAttackActionPerformed

    //triggers player Special Enemys dont get reaction
    private void btnSpecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpecialActionPerformed
        // TODO add your handling code here:
        playerSpecial();
        playerUpdate();
        enemyUpdate();
    }//GEN-LAST:event_btnSpecialActionPerformed

    //starts new game
    private void newGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameActionPerformed
        // TODO add your handling code here:

        newChar.setVisible(true);
    }//GEN-LAST:event_newGameActionPerformed

    //summon murloc
    private void summon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summon1ActionPerformed
        // TODO add your handling code here:
        pos15.setSelected(true);

        Murloc temp = new Murloc();

        enemyClass = temp.getName();
        enemyHP = temp.getMax();
        enemyMax = temp.getMax();
        enemyAtt = temp.getAtt();
        enemyDef = temp.getDef();

        txtEnemy.setText(enemyClass + "\nHP: " + enemyHP + "/" + enemyMax + "\nAttack Damage:" + enemyAtt + "\nDefense: " + enemyDef + "\n");
        txtAction.append("An enemy " + enemyClass + "has appeared. \n");
    }//GEN-LAST:event_summon1ActionPerformed

    //New Player creation cancelation
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:

        newChar.setVisible(false);
        pos1.setSelected(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    //New Player creation start
    private void btnBeginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBeginActionPerformed
        // TODO add your handling code here:
        pos1.setSelected(true);
        pos2.setSelected(false);
        pos3.setSelected(false);
        pos4.setSelected(false);
        pos5.setSelected(false);
        pos6.setSelected(false);
        pos7.setSelected(false);
        pos8.setSelected(false);
        pos9.setSelected(false);
        pos10.setSelected(false);
        pos11.setSelected(false);
        pos12.setSelected(false);
        pos13.setSelected(false);
        pos14.setSelected(false);
        pos15.setSelected(false);

        txtSelf.setText("");
        txtEnemy.setText("");
        txtAction.setText("");

        switch (cboClassSelect.getSelectedIndex()) {
            case 0:
                selectTank(txtSetName.getText());
                break;
            case 1:
                selectHealer(txtSetName.getText());
                break;
            case 2:
                selectRange(txtSetName.getText());
                break;
            case 3:
                selectMelee(txtSetName.getText());
                break;
            default:
                break;
        }

        txtAction.append("Welecome to Traning Simulator " + playerClass + "\n");
        txtSelf.setText("Class: " + playerClass + "\nHP: " + playerHP + "/" + playerMax + "\nAttack Damage: " + playerAtt + "\nDefense: " + playerDef + "\nRange: " + playerRange);
        newChar.setVisible(false);

    }//GEN-LAST:event_btnBeginActionPerformed

    //Summon Goblen
    private void summon2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summon2ActionPerformed
        // TODO add your handling code here:
        pos15.setSelected(true);

        Goblin temp = new Goblin();

        enemyClass = temp.getName();
        enemyHP = temp.getMax();
        enemyMax = temp.getMax();
        enemyAtt = temp.getAtt();
        enemyDef = temp.getDef();

        txtEnemy.setText(enemyClass + "\nHP: " + enemyHP + "/" + enemyMax + "\nAttack Damage:" + enemyAtt + "\nDefense: " + enemyDef + "\n");
        txtAction.append("An enemy " + enemyClass + "has appeared. \n");
    }//GEN-LAST:event_summon2ActionPerformed

    //Summon Troll
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        pos15.setSelected(true);

        Troll temp = new Troll();

        enemyClass = temp.getName();
        enemyHP = temp.getMax();
        enemyMax = temp.getMax();
        enemyAtt = temp.getAtt();
        enemyDef = temp.getDef();

        txtEnemy.setText(enemyClass + "\nHP: " + enemyHP + "/" + enemyMax + "\nAttack Damage:" + enemyAtt + "\nDefense: " + enemyDef + "\n");
        txtAction.append("An enemy " + enemyClass + "has appeared. \n");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //Summon Boss
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        pos15.setSelected(true);

        Boss temp = new Boss();

        enemyClass = temp.getName();
        enemyHP = temp.getMax();
        enemyMax = temp.getMax();
        enemyAtt = temp.getAtt();
        enemyDef = temp.getDef();

        txtEnemy.setText(enemyClass + "\nHP: " + enemyHP + "/" + enemyMax + "\nAttack Damage:" + enemyAtt + "\nDefense: " + enemyDef + "\n");
        txtAction.append("An enemy " + enemyClass + "has appeared. \n");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    //exit button
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DemoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DemoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DemoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DemoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DemoGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAttack;
    private javax.swing.JButton btnBegin;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDefend;
    private javax.swing.JButton btnMove;
    private javax.swing.JButton btnSpecial;
    private javax.swing.JComboBox<String> cboClassSelect;
    private javax.swing.JMenuItem exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JRadioButton jRadioButton16;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenuItem login;
    private javax.swing.JFrame newChar;
    private javax.swing.JMenuItem newGame;
    private javax.swing.JRadioButton pos1;
    private javax.swing.JRadioButton pos10;
    private javax.swing.JRadioButton pos11;
    private javax.swing.JRadioButton pos12;
    private javax.swing.JRadioButton pos13;
    private javax.swing.JRadioButton pos14;
    private javax.swing.JRadioButton pos15;
    private javax.swing.JRadioButton pos2;
    private javax.swing.JRadioButton pos3;
    private javax.swing.JRadioButton pos4;
    private javax.swing.JRadioButton pos5;
    private javax.swing.JRadioButton pos6;
    private javax.swing.JRadioButton pos7;
    private javax.swing.JRadioButton pos8;
    private javax.swing.JRadioButton pos9;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem summon1;
    private javax.swing.JMenuItem summon2;
    private javax.swing.JTextArea txtAction;
    private javax.swing.JTextArea txtEnemy;
    private javax.swing.JTextArea txtSelf;
    private javax.swing.JTextField txtSetName;
    private javax.swing.JTextField txtSetPass;
    // End of variables declaration//GEN-END:variables

    //player movment 
    private void playerMovement() {
        if (pos1.isSelected()) {
            if (!pos2.isSelected()) {
                pos1.setSelected(false);
                pos2.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos2.isSelected()) {
            if (!pos3.isSelected()) {
                pos2.setSelected(false);
                pos3.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos3.isSelected()) {
            if (!pos4.isSelected()) {
                pos3.setSelected(false);
                pos4.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos4.isSelected()) {
            if (!pos5.isSelected()) {
                pos4.setSelected(false);
                pos5.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos5.isSelected()) {
            if (!pos6.isSelected()) {
                pos5.setSelected(false);
                pos6.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos6.isSelected()) {
            if (!pos7.isSelected()) {
                pos6.setSelected(false);
                pos7.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos7.isSelected()) {
            if (!pos8.isSelected()) {
                pos7.setSelected(false);
                pos8.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos8.isSelected()) {
            if (!pos9.isSelected()) {
                pos8.setSelected(false);
                pos9.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos9.isSelected()) {
            if (!pos10.isSelected()) {
                pos9.setSelected(false);
                pos10.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos10.isSelected()) {
            if (!pos11.isSelected()) {
                pos10.setSelected(false);
                pos11.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos11.isSelected()) {
            if (!pos12.isSelected()) {
                pos11.setSelected(false);
                pos12.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos12.isSelected()) {
            if (!pos13.isSelected()) {
                pos12.setSelected(false);
                pos13.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else if (pos13.isSelected()) {
            if (!pos14.isSelected()) {
                pos13.setSelected(false);
                pos14.setSelected(true);
            } else {
                txtAction.append("The enemy is in the way. \n");
            }
        } else {
            txtAction.append("Can not move. \n");
        }

    }

    //enemy "ai" 
    private void enemyReaction() {
        if (pos15.isSelected()) {
            if (!pos14.isSelected()) {
                pos15.setSelected(false);
                pos14.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos14.isSelected()) {
            if (!pos13.isSelected()) {
                pos14.setSelected(false);
                pos13.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos13.isSelected()) {
            if (!pos12.isSelected()) {
                pos13.setSelected(false);
                pos12.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos12.isSelected()) {
            if (!pos11.isSelected()) {
                pos12.setSelected(false);
                pos11.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos11.isSelected()) {
            if (!pos10.isSelected()) {
                pos11.setSelected(false);
                pos10.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos10.isSelected()) {
            if (!pos9.isSelected()) {
                pos10.setSelected(false);
                pos9.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos9.isSelected()) {
            if (!pos8.isSelected()) {
                pos9.setSelected(false);
                pos8.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos8.isSelected()) {
            if (!pos7.isSelected()) {
                pos8.setSelected(false);
                pos7.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos7.isSelected()) {
            if (!pos6.isSelected()) {
                pos7.setSelected(false);
                pos6.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos6.isSelected()) {
            if (!pos5.isSelected()) {
                pos6.setSelected(false);
                pos5.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos5.isSelected()) {
            if (!pos4.isSelected()) {
                pos5.setSelected(false);
                pos4.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos4.isSelected()) {
            if (!pos3.isSelected()) {
                pos4.setSelected(false);
                pos3.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else if (pos3.isSelected()) {
            if (!pos2.isSelected()) {
                pos3.setSelected(false);
                pos2.setSelected(true);
                txtAction.append("You see the enemy move forward. \n");
            } else {
                if (playerStatus) {
                txtAction.append("The enemy attempts to attack. \n   But you were prepared. \n");
                } else {
                enemyAttack();
                }
            }
        } else {

        }

    }

    //enemy attack
    private void enemyAttack() {

        Random x = new Random();

        int hit = x.nextInt(100) + 1;

        if (hit >= 50) {
            txtAction.append("You see the enemy fumble around. \n");
        } else if (enemyAtt - playerDef <= 0) {
            txtAction.append("This enemys attack seems week. \nIt does no damage. \n");
        } else {
            txtAction.append("You have been attacked. \n");
            playerHP = playerHP - (enemyAtt - playerDef);
            playerUpdate();
        }

    }
    
    //special attacks
    private void playerSpecial() {
        switch (playerClass) {
            case "Palidan":
                playerDef = playerDef + 5;
            case "Priest":
                playerHP = playerMax;
            case "Hunter":
                enemyHP = enemyHP - 5;
            case "Warrior":
                playerAtt = playerAtt + 5;
            default:
                break;
        }
    }

    //melee character attack
    private void playerMeleeAttack() {

        Random x = new Random();

        int hit = x.nextInt(100) + 1;

        if (hit >= 50) {
            txtAction.append("Your attack missed. \n");
        } else if (playerAtt - enemyDef <= 0) {
            txtAction.append("The enemy let you attack him. \nIt does no damage. \n");
        } else if (pos1.isSelected()) {
            if (pos2.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos2.isSelected()) {
            if (pos3.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos3.isSelected()) {
            if (pos4.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos4.isSelected()) {
            if (pos5.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos5.isSelected()) {
            if (pos6.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos6.isSelected()) {
            if (pos7.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos7.isSelected()) {
            if (pos8.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos8.isSelected()) {
            if (pos9.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos9.isSelected()) {
            if (pos10.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos10.isSelected()) {
            if (pos11.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos11.isSelected()) {
            if (pos12.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos12.isSelected()) {
            if (pos12.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos13.isSelected()) {
            if (pos14.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else if (pos14.isSelected()) {
            if (pos15.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You attemted to attack the air. \n    ...It did nothing \n");
            }
        } else {

        }
    }

    //ranged player attack 
    private void playerRangeAttack() {

        Random x = new Random();

        int hit = x.nextInt(100) + 1;

        if (hit >= 50) {
            txtAction.append("Your attack missed. \n");
        } else if (playerAtt - enemyDef <= 0) {
            txtAction.append("The enemy let you attack him. \nIt does no damage. \n");
        } else if (pos1.isSelected()) {
            if (pos2.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos3.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos2.isSelected()) {
            if (pos3.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos4.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos3.isSelected()) {
            if (pos4.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos5.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos4.isSelected()) {
            if (pos5.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos6.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos5.isSelected()) {
            if (pos6.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos7.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos6.isSelected()) {
            if (pos7.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos8.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos7.isSelected()) {
            if (pos8.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos9.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos8.isSelected()) {
            if (pos9.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos10.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos9.isSelected()) {
            if (pos10.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos11.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos10.isSelected()) {
            if (pos11.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos12.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos11.isSelected()) {
            if (pos12.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos13.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos12.isSelected()) {
            if (pos13.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos14.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos13.isSelected()) {
            if (pos14.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else if (pos15.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else if (pos14.isSelected()) {
            if (pos15.isSelected()) {
                txtAction.append("You attacked the enemy. \n");
                enemyHP = enemyHP - (playerAtt - enemyDef);
                enemyUpdate();
            } else {
                txtAction.append("You fire an arrow. \n    ...It did nothing \n");
            }
        } else {

        }
    }

    //creates tank
    private void selectTank(String x) {

        Tank temp = new Tank(x);

        playerClass = "Palidan";

        playerHP = temp.getMax();
        playerMax = temp.getMax();
        playerAtt = temp.getAtt();
        playerDef = temp.getDef();
        playerRange = temp.getRange();

    }

    //creates healer char
    private void selectHealer(String x) {

        Healer temp = new Healer(x);

        playerClass = "Priest";

        playerHP = temp.getMax();
        playerMax = temp.getMax();
        playerAtt = temp.getAtt();
        playerDef = temp.getDef();
        playerRange = temp.getRange();
    }

    //creates reage charactor
    private void selectRange(String x) {

        Range temp = new Range(x);

        playerClass = "Hunter";

        playerHP = temp.getMax();
        playerMax = temp.getMax();
        playerAtt = temp.getAtt();
        playerDef = temp.getDef();
        playerRange = temp.getRange();
    }

    //creating melee character
    private void selectMelee(String x) {

        Melee temp = new Melee(x);

        playerClass = "Warrior";

        playerHP = temp.getMax();
        playerMax = temp.getMax();
        playerAtt = temp.getAtt();
        playerDef = temp.getDef();
        playerRange = temp.getRange();
    }

    //updates player info
    private void playerUpdate() {
        txtSelf.setText("Class: " + playerClass + "\nHP: " + playerHP + "/" + playerMax + "\nAttack Damage: " + playerAtt + "\nDefense: " + playerDef + "\nRange: " + playerRange);

    }

    //updates enemy info
    private void enemyUpdate() {
        txtEnemy.setText(enemyClass + "\nHP: " + enemyHP + "/" + enemyMax + "\nAttack Damage:" + enemyAtt + "\nDefense: " + enemyDef + "\n");
    }

    //generates random number
    private Integer randomNumber() {

        int x = 51;

        try {
            RandomIntegerClient cl = new RandomIntegerClient("trevdog16@gmail.com");
            //get a list of 20 random integers(base 10) in the  [1,100] interval.
            List<String> myRandomIntegers = cl.getRandomIntDecimal(1, 100, 1);

            x = Integer.parseInt(myRandomIntegers.get(0));

        } catch (IOException e) {

        }

        return x;

    }

}
